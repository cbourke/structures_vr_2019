using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEngine;

namespace SplineMesh {
    /// <summary>
    /// Example of component to bend a mesh along a spline. This component can be used as-is but will most likely be a base for your own component.
    /// 
    /// In this basic exemple, you only specify rotation and scale to adapt to the provided mesh.
    /// Scale is useful because most of the time, the modeling tools don't use the scaling you want.
    /// Rotation is often mandatory because MeshBender will always bend along the X axis and your mesh may be oriented differently.
    /// 
    /// One children GameObject is created for each spline curve here, with a MeshBender and a MeshFilter on each. The list of GameObject is stored for later cleanup.
    /// Each time the spline nodes are changed (a node is added or removed), the stored object are cleaned and the entire process is redone.
    /// 
    /// The MeshBender listen the curve to detect itself if the nodes it is connected to are moved or rotated. You don't have to manage that yourself here.
    /// </summary>
    [ExecuteInEditMode]
    [SelectionBase]
    [DisallowMultipleComponent]
    public class ExamplePipe : MonoBehaviour {
        private GameObject generated;
        private Spline spline = null;
        private bool toUpdate = true;

        public Mesh mesh;
        public Material material;
        public Vector3 rotation;

        private void OnEnable() {
            string generatedName = "generated by " + GetType().Name;
            var generatedTranform = transform.Find(generatedName);
            generated = generatedTranform != null ? generatedTranform.gameObject : UOUtility.Create(generatedName, gameObject);

            spline = GetComponentInParent<Spline>();
            spline.NodeListChanged += (s, e) => toUpdate = true;
        }

        private void OnValidate() {
            toUpdate = true;
        }

        private void Update() {
            if (toUpdate) {
                CreateMeshes();
                toUpdate = false;
            }
        }

        public void CreateMeshes() {
            UOUtility.DestroyChildren(generated);

            int i = 0;
            foreach (CubicBezierCurve curve in spline.GetCurves()) {
                GameObject go = UOUtility.Create("SplineMesh" + i++, generated,
                    typeof(MeshFilter),
                    typeof(MeshRenderer),
                    typeof(MeshBender));
                go.GetComponent<MeshRenderer>().material = material;
                MeshBender mb = go.GetComponent<MeshBender>();
                mb.Source = mesh;
                mb.Rotation = Quaternion.Euler(rotation);
                mb.Curve = curve;
                mb.ComputeIfNeeded();
            }
        }
    }
}
