using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace SplineMesh {
    /// <summary>
    /// Example of component to bend a mesh along a spline with an offset.
    /// 
    /// This component can be used as-is but will most likely be a base for your own component. For explanations of the base component, <see cref="ExamplePipe"/>
    /// 
    /// In this component, we use the MeshBender translation parameter.
    /// It allows you move the source mesh on the Y and Z axis, considering that X axis as spline tangent.
    /// 
    /// This is usefull to align a mesh that is not centered without reworking it in a modeling tool.
    /// It is also useful to offset the mesh from the spline, like in the case of raillings on road sides.
    /// </summary>
    [ExecuteInEditMode]
    [SelectionBase]
    [DisallowMultipleComponent]
    public class ExampleRailling : MonoBehaviour {
        private GameObject generated;
        private Spline spline = null;
        private bool toUpdate = true;

        public Mesh mesh;
        public Material material;
        public Vector3 rotation;
        public float YOffset;
        public float ZOffset;

        private void OnEnable() {
            string generatedName = "generated by " + GetType().Name;
            var generatedTranform = transform.Find(generatedName);
            generated = generatedTranform != null ? generatedTranform.gameObject : UOUtility.Create(generatedName, gameObject);

            spline = GetComponentInParent<Spline>();
            spline.NodeListChanged += (s, e) => toUpdate = true;
        }

        private void OnValidate() {
            toUpdate = true;
        }

        private void Update() {
            if (toUpdate) {
                CreateMeshes();
                toUpdate = false;
            }
        }

        public void CreateMeshes() {
            UOUtility.DestroyChildren(generated);

            int i = 0;
            foreach (CubicBezierCurve curve in spline.GetCurves()) {
                GameObject go = UOUtility.Create("SplineMesh" + i++, generated,
                    typeof(MeshFilter),
                    typeof(MeshRenderer),
                    typeof(MeshBender));

                go.GetComponent<MeshRenderer>().material = material;
                MeshBender mb = go.GetComponent<MeshBender>();
                mb.Source = mesh;
                mb.Rotation = Quaternion.Euler(rotation);
                mb.Translation = new Vector3(0, YOffset, ZOffset);
                mb.Curve = curve;
                mb.ComputeIfNeeded();
            }
        }
    }
}
